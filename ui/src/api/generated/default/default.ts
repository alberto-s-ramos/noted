/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Noted API
 * API for the Noted application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateNoteRequest,
  DeleteNotesId200,
  GetHealth200,
  GetNotes200,
  GetNotesId200,
  GetPing200,
  PostNotes201,
  PutNotesId200,
  UpdateNoteRequest,
} from '.././model';

import { customInstance } from '../../mutator/custom-instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Returns the health status of the API
 * @summary Health check
 */
export const getHealth = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetHealth200>({ url: `/health`, method: 'GET', signal }, options);
};

export const getGetHealthQueryKey = () => {
  return [`/health`] as const;
};

export const getGetHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHealthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({ signal }) =>
    getHealth(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>;
export type GetHealthQueryError = unknown;

export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealth>>,
          TError,
          Awaited<ReturnType<typeof getHealth>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealth>>,
          TError,
          Awaited<ReturnType<typeof getHealth>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Health check
 */

export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetHealthQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Simple ping endpoint for testing connectivity
 * @summary Ping endpoint
 */
export const getPing = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<GetPing200>({ url: `/ping`, method: 'GET', signal }, options);
};

export const getGetPingQueryKey = () => {
  return [`/ping`] as const;
};

export const getGetPingQueryOptions = <
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPingQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPing>>> = ({ signal }) =>
    getPing(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPing>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetPingQueryResult = NonNullable<Awaited<ReturnType<typeof getPing>>>;
export type GetPingQueryError = unknown;

export function useGetPing<TData = Awaited<ReturnType<typeof getPing>>, TError = unknown>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPing>>,
          TError,
          Awaited<ReturnType<typeof getPing>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPing<TData = Awaited<ReturnType<typeof getPing>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPing>>,
          TError,
          Awaited<ReturnType<typeof getPing>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetPing<TData = Awaited<ReturnType<typeof getPing>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Ping endpoint
 */

export function useGetPing<TData = Awaited<ReturnType<typeof getPing>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPingQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve all notes
 * @summary Get all notes
 */
export const getNotes = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetNotes200>({ url: `/notes`, method: 'GET', signal }, options);
};

export const getGetNotesQueryKey = () => {
  return [`/notes`] as const;
};

export const getGetNotesQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotes>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNotesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotes>>> = ({ signal }) =>
    getNotes(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNotes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetNotesQueryResult = NonNullable<Awaited<ReturnType<typeof getNotes>>>;
export type GetNotesQueryError = unknown;

export function useGetNotes<TData = Awaited<ReturnType<typeof getNotes>>, TError = unknown>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotes>>,
          TError,
          Awaited<ReturnType<typeof getNotes>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetNotes<TData = Awaited<ReturnType<typeof getNotes>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotes>>,
          TError,
          Awaited<ReturnType<typeof getNotes>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetNotes<TData = Awaited<ReturnType<typeof getNotes>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get all notes
 */

export function useGetNotes<TData = Awaited<ReturnType<typeof getNotes>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetNotesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new note
 * @summary Create a new note
 */
export const postNotes = (
  createNoteRequest: CreateNoteRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PostNotes201>(
    {
      url: `/notes`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createNoteRequest,
      signal,
    },
    options,
  );
};

export const getPostNotesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNotes>>,
    TError,
    { data: CreateNoteRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postNotes>>,
  TError,
  { data: CreateNoteRequest },
  TContext
> => {
  const mutationKey = ['postNotes'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postNotes>>,
    { data: CreateNoteRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postNotes(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostNotesMutationResult = NonNullable<Awaited<ReturnType<typeof postNotes>>>;
export type PostNotesMutationBody = CreateNoteRequest;
export type PostNotesMutationError = unknown;

/**
 * @summary Create a new note
 */
export const usePostNotes = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postNotes>>,
      TError,
      { data: CreateNoteRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postNotes>>,
  TError,
  { data: CreateNoteRequest },
  TContext
> => {
  const mutationOptions = getPostNotesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieve a specific note by its ID
 * @summary Get a note by ID
 */
export const getNotesId = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetNotesId200>({ url: `/notes/${id}`, method: 'GET', signal }, options);
};

export const getGetNotesIdQueryKey = (id?: string) => {
  return [`/notes/${id}`] as const;
};

export const getGetNotesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotesId>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotesId>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNotesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotesId>>> = ({ signal }) =>
    getNotesId(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNotesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetNotesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getNotesId>>>;
export type GetNotesIdQueryError = void;

export function useGetNotesId<TData = Awaited<ReturnType<typeof getNotesId>>, TError = void>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotesId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotesId>>,
          TError,
          Awaited<ReturnType<typeof getNotesId>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetNotesId<TData = Awaited<ReturnType<typeof getNotesId>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotesId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotesId>>,
          TError,
          Awaited<ReturnType<typeof getNotesId>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetNotesId<TData = Awaited<ReturnType<typeof getNotesId>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotesId>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get a note by ID
 */

export function useGetNotesId<TData = Awaited<ReturnType<typeof getNotesId>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotesId>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetNotesIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an existing note
 * @summary Update a note
 */
export const putNotesId = (
  id: string,
  updateNoteRequest: UpdateNoteRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PutNotesId200>(
    {
      url: `/notes/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateNoteRequest,
    },
    options,
  );
};

export const getPutNotesIdMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNotesId>>,
    TError,
    { id: string; data: UpdateNoteRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putNotesId>>,
  TError,
  { id: string; data: UpdateNoteRequest },
  TContext
> => {
  const mutationKey = ['putNotesId'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putNotesId>>,
    { id: string; data: UpdateNoteRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putNotesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutNotesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putNotesId>>>;
export type PutNotesIdMutationBody = UpdateNoteRequest;
export type PutNotesIdMutationError = void;

/**
 * @summary Update a note
 */
export const usePutNotesId = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putNotesId>>,
      TError,
      { id: string; data: UpdateNoteRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putNotesId>>,
  TError,
  { id: string; data: UpdateNoteRequest },
  TContext
> => {
  const mutationOptions = getPutNotesIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete an existing note
 * @summary Delete a note
 */
export const deleteNotesId = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<DeleteNotesId200>({ url: `/notes/${id}`, method: 'DELETE' }, options);
};

export const getDeleteNotesIdMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNotesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNotesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteNotesId'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteNotesId>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteNotesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNotesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteNotesId>>>;

export type DeleteNotesIdMutationError = void;

/**
 * @summary Delete a note
 */
export const useDeleteNotesId = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteNotesId>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteNotesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteNotesIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
