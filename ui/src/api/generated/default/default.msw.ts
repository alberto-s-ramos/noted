/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Noted API
 * API for the Noted application
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';
import type { RequestHandlerOptions } from 'msw';

import type {
  DeleteNotesId200,
  GetHealth200,
  GetNotes200,
  GetNotesId200,
  GetPing200,
  PostNotes201,
  PutNotesId200,
} from '.././model';

export const getGetHealthResponseMock = (
  overrideResponse: Partial<GetHealth200> = {},
): GetHealth200 => ({
  status: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  environment: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetPingResponseMock = (overrideResponse: Partial<GetPing200> = {}): GetPing200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetNotesResponseMock = (
  overrideResponse: Partial<GetNotes200> = {},
): GetNotes200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      content: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostNotesResponseMock = (
  overrideResponse: Partial<PostNotes201> = {},
): PostNotes201 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      content: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetNotesIdResponseMock = (
  overrideResponse: Partial<GetNotesId200> = {},
): GetNotesId200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  data: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      content: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPutNotesIdResponseMock = (
  overrideResponse: Partial<PutNotesId200> = {},
): PutNotesId200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  data: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      content: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
      updated_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteNotesIdResponseMock = (
  overrideResponse: Partial<DeleteNotesId200> = {},
): DeleteNotesId200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  id: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
  ...overrideResponse,
});

export const getGetHealthMockHandler = (
  overrideResponse?:
    | GetHealth200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetHealth200> | GetHealth200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/health',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetHealthResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetPingMockHandler = (
  overrideResponse?:
    | GetPing200
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetPing200> | GetPing200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/ping',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetPingResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetNotesMockHandler = (
  overrideResponse?:
    | GetNotes200
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetNotes200> | GetNotes200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/notes',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetNotesResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getPostNotesMockHandler = (
  overrideResponse?:
    | PostNotes201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostNotes201> | PostNotes201),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/notes',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPostNotesResponseMock(),
        ),
        { status: 201, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getGetNotesIdMockHandler = (
  overrideResponse?:
    | GetNotesId200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetNotesId200> | GetNotesId200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/notes/:id',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetNotesIdResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getPutNotesIdMockHandler = (
  overrideResponse?:
    | PutNotesId200
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<PutNotesId200> | PutNotesId200),
  options?: RequestHandlerOptions,
) => {
  return http.put(
    '*/notes/:id',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPutNotesIdResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getDeleteNotesIdMockHandler = (
  overrideResponse?:
    | DeleteNotesId200
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeleteNotesId200> | DeleteNotesId200),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    '*/notes/:id',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getDeleteNotesIdResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};
export const getDefaultMock = () => [
  getGetHealthMockHandler(),
  getGetPingMockHandler(),
  getGetNotesMockHandler(),
  getPostNotesMockHandler(),
  getGetNotesIdMockHandler(),
  getPutNotesIdMockHandler(),
  getDeleteNotesIdMockHandler(),
];
